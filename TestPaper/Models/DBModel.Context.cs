//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectX.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AllocateCourse> AllocateCourse { get; set; }
        public virtual DbSet<Answers> Answers { get; set; }
        public virtual DbSet<Courses> Courses { get; set; }
        public virtual DbSet<ExamType> ExamType { get; set; }
        public virtual DbSet<Levels> Levels { get; set; }
        public virtual DbSet<Options> Options { get; set; }
        public virtual DbSet<OptionTypes> OptionTypes { get; set; }
        public virtual DbSet<Papers> Papers { get; set; }
        public virtual DbSet<Questions> Questions { get; set; }
        public virtual DbSet<ReportCard> ReportCard { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Scores> Scores { get; set; }
        public virtual DbSet<StudentTestLog> StudentTestLog { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<GetAnswers_Result> GetAnswers(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnswers_Result>("GetAnswers", userIdParameter);
        }
    
        public virtual ObjectResult<GetQuestions_Result> GetQuestions(Nullable<int> courseId, Nullable<int> paperId, Nullable<int> userId, Nullable<int> levelId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("PaperId", paperId) :
                new ObjectParameter("PaperId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var levelIdParameter = levelId.HasValue ?
                new ObjectParameter("LevelId", levelId) :
                new ObjectParameter("LevelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestions_Result>("GetQuestions", courseIdParameter, paperIdParameter, userIdParameter, levelIdParameter);
        }
    }
}
